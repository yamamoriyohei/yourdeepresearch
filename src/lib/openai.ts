// openai.ts
// OpenAI APIとのインタラクションを処理するファイル

import OpenAI from "openai";

// OpenAIクライアントの初期化
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || "YOUR_OPENAI_API_KEY_HERE",
});

interface OpenAIResponse {
  id: string;
  object: string;
  created: number;
  model: string;
  choices: Array<{
    index: number;
    message: {
      role: string;
      content: string;
    };
    finish_reason: string;
  }>;
  usage: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
}

/**
 * OpenAIのGPTモデルを使用してテキストを生成する
 * @param prompt OpenAIに送信するプロンプト
 * @param model 使用するモデル（デフォルトはgpt-3.5-turbo）
 * @returns 生成されたテキスト、エラーの場合はnull
 */
export async function generateWithOpenAI(
  prompt: string,
  model: string = "gpt-3.5-turbo"
): Promise<string | null> {
  if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === "YOUR_OPENAI_API_KEY_HERE") {
    console.error("OpenAI API Key is not configured. Please set it in your environment variables.");
    // 開発用のモックデータを返す
    console.warn("OpenAI API key not found, returning mock data.");
    return `This is a mock OpenAI generation for the prompt: "${prompt}". In a real scenario, this content would be generated by the ${model} model based on the provided prompt. It would contain insightful and relevant information.`;
  }

  try {
    // OpenAI SDKを使用してリクエストを送信
    const response = await openai.chat.completions.create({
      model,
      messages: [
        {
          role: "system",
          content: "You are a helpful assistant that provides accurate and detailed information.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      temperature: 0.7,
    });

    return response.choices[0]?.message?.content || null;
  } catch (error) {
    console.error("Error calling OpenAI API:", error);
    return null;
  }
}

/**
 * OpenAIの埋め込みモデルを使用してテキストをベクトルに変換する
 * @param text 埋め込みを生成するテキスト
 * @param model 使用するモデル（デフォルトはtext-embedding-ada-002）
 * @returns 埋め込みベクトル
 */
export async function getEmbedding(
  text: string,
  model: string = "text-embedding-ada-002"
): Promise<number[]> {
  try {
    if (!process.env.OPENAI_API_KEY || process.env.OPENAI_API_KEY === "YOUR_OPENAI_API_KEY_HERE") {
      console.error("OpenAI API Key is not configured for embeddings.");
      // モックの埋め込みベクトルを返す
      console.warn("Returning mock embedding vector.");
      return Array(1536)
        .fill(0)
        .map(() => Math.random() * 0.1);
    }

    // テキストが長すぎる場合は切り詰める
    // text-embedding-ada-002の最大トークン数は約耀8191トークン
    // 安全のために文字数で切り詰める（約耀16000文字）
    const truncatedText = text.length > 16000 ? text.substring(0, 16000) : text;

    const response = await openai.embeddings.create({
      model,
      input: truncatedText,
    });

    return response.data[0].embedding;
  } catch (error) {
    console.error("Error generating embedding with OpenAI:", error);
    // エラー時はモックの埋め込みベクトルを返す
    return Array(1536)
      .fill(0)
      .map(() => Math.random() * 0.1);
  }
}
